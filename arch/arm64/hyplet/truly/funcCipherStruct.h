#pragma once

#define CTL_CODE( DeviceType, Function, Method, Access ) (                 \
    ((DeviceType) << 16) | ((Access) << 14) | ((Function) << 2) | (Method) \
)

#define STATUS_SEVERITY_WARNING          0x2
#define STATUS_SEVERITY_SUCCESS          0x0
#define STATUS_SEVERITY_INFORMATIONAL    0x1
#define STATUS_SEVERITY_ERROR            0x3

#define IOCTL_TPDRIVER_DEPLOY		CTL_CODE(0x8001, 0x801, 0, 0)
#define IOCTL_TPDRIVER_SHUTDOWN		CTL_CODE(0x8001, 0x802, 0, 0)

#define TP_STATUS(SEVERITY, FACILITY, CODE) (((CODE) << 16) | (((FACILITY) & 0xfff) << 4) | ((SEVERITY) & 3) | 4)
#define TP_ERROR(FACILITY, CODE) TP_STATUS(STATUS_SEVERITY_ERROR, FACILITY, CODE)

#define TP_FACILITY_PROTOCOL	1
#define TP_FACILITY_VMM			2
#define TP_FACILITY_QUEUE		3

#define TP_SUCCESS						TP_STATUS(STATUS_SEVERITY_SUCCESS, 0, 0)

#define TP_ERROR_PROTOCOL_INIT			TP_ERROR(TP_FACILITY_PROTOCOL, 1)
#define TP_ERROR_PROTOCOL_CONNECT		TP_ERROR(TP_FACILITY_PROTOCOL, 2)
#define TP_ERROR_PROTOCOL_BAD_USERNAME	TP_ERROR(TP_FACILITY_PROTOCOL, 3)
#define TP_ERROR_PROTOCOL_BAD_GAMEID	TP_ERROR(TP_FACILITY_PROTOCOL, 4)
#define TP_ERROR_PROTOCOL_BAD_PASSWORD	TP_ERROR(TP_FACILITY_PROTOCOL, 5)
#define TP_ERROR_PROTOCOL_BAD_RESULT	TP_ERROR(TP_FACILITY_PROTOCOL, 6)
#define TP_ERROR_PROTOCOL_GENERAL		TP_ERROR(TP_FACILITY_PROTOCOL, 7)

#define TP_ERROR_VMM_UNSUPPORTED		TP_ERROR(TP_FACILITY_VMM, 1)
#define TP_ERROR_VMM_DEPLOY_FAILED		TP_ERROR(TP_FACILITY_VMM, 2)
#define TP_ERROR_VMM_LOCK_BIT			TP_ERROR(TP_FACILITY_VMM, 3)
#define TP_ERROR_VMM_INSUFFICENT		TP_ERROR(TP_FACILITY_VMM, 4)
#define TP_ERROR_VMM_MISSING_SECTION	TP_ERROR(TP_FACILITY_VMM, 5)

#define TP_ERROR_QUEUE_BAD_ALLOC		TP_ERROR(TP_FACILITY_QUEUE, 1)
#define TP_ERROR_QUEUE_INVALID_CODE		TP_ERROR(TP_FACILITY_QUEUE, 2)


#define HC_FUNC_END		0x40000001
#define HC_DO_TEST1		0x400000ff
#define HC_FREEZE		0x400000fe
#define HC_FREEZE_DONE	0x400000fd
#define HC_SHUTDOWN		0x400000fc
#define HC_RCV_KEY		0x400000fb
#define HC_HANDLE_IPI	0x400000fa
#define HC_HOT_INT		0x400000f9
#define HC_PROC_EXIT	0x400000f8
#define HC_JAVA			0x400000ea
#define HC_DECRYPT		0x400000df
#define HC_EXEC_PROT_SYNC 0x400000dd
#define HC_EXEC_PROT_TEST 0x400000dc
#define HC_STATUS_REQ 0x400000db
#define HC_SSTEP_REQ 	0x400000da
#define HC_RIGHTS_REQ 0x400000eb

typedef struct
{
	void *callback_filename;
	unsigned long callback_filename_length;
	void *image;
	unsigned long image_length;
} VALIDATION_REQUEST, *PVALIDATION_REQUEST;

#define HYPERCALL(X) do { int __[4]; __cpuid(__, (int)X); } while (0, 0)

#define	HLT_OPCODE	0xF4
